;Regla para establecer la estrategia y el comando para escribir en un archivo
(defrule inicio
(declare (salience 100))
=>
(set-strategy random)
(dribble-on "salida-Prueba-X.txt")
)

;///////////////////////////////////   FASE 1: OFERTA   ///////////////////////////////////////////////
(defrule AñadirOfertaNoInteres
?jugador <- (object (is-a JUGADOR) (id ?idJ) (casilla_ficha_barco ?casillaj)) 
?oferta1 <- (object (is-a OFERTA) (casilla ?casillao1) (interes ?interes1) (unidades_bienes ?uds1) (tipo_bienes ?tipo1))
?oferta2 <- (object (is-a OFERTA) (casilla ?casillao2) (interes ?interes2) (unidades_bienes ?uds2) (tipo_bienes ?tipo2))
?ofertai1 <- (object (is-a OFERTA_INICIAL) (unidades ?u1) (tipo ?t1))
?ofertai2 <- (object (is-a OFERTA_INICIAL) (unidades ?u2) (tipo ?t2))
?ronda <- (object (is-a RONDA) (id ?idRonda) (id_jugador_turno ?idJugT) (casilla ?casilla) (jugando_ronda ?jugando_ronda))
?fase1 <- (fase1_completada ?completada)
(test (eq ?idJ ?idJugT))
(test (eq ?casillaj ?casilla))
(test (eq ?jugando_ronda true))
(test (eq ?casillaj ?casillao1))
(test (eq ?casillaj ?casillao2))
(test (eq ?tipo1 ?t1))
(test (eq ?tipo2 ?t2))
(test (neq ?tipo1 ?tipo2))
(test (neq ?t1 ?t2))
(test (> ?uds1 0))
(test (> ?uds2 0))
(test (eq ?interes1 false))
(test (eq ?interes2 false))
(test (eq ?completada false))
=>
(modify-instance ?ofertai1 (unidades (+ ?u1 ?uds1)))
(modify-instance ?ofertai2 (unidades (+ ?u2 ?uds2)))
(retract ?fase1)
(assert (fase1_completada true))
(printout t crlf)
(printout t "RONDA " ?idRonda " CASILLA " ?casilla crlf)
(printout t "El jugador " ?idJ " ha añadido a la oferta " ?uds1 " de " ?tipo1 crlf)
(printout t "El jugador " ?idJ " ha añadido a la oferta " ?uds2 " de " ?tipo2 crlf)
)

(defrule AñadirOfertaInteresNoTienePrestamosJugador1
?jugador <- (object (is-a JUGADOR) (id ?idJ) (casilla_ficha_barco ?casillaj) (prestamos ?prestamo)) 
?oferta1 <- (object (is-a OFERTA) (casilla ?casillao1) (interes ?interes1) (unidades_bienes ?uds1) (tipo_bienes ?tipo1))
?oferta2 <- (object (is-a OFERTA) (casilla ?casillao2) (interes ?interes2) (unidades_bienes ?uds2) (tipo_bienes ?tipo2))
?ofertai1 <- (object (is-a OFERTA_INICIAL) (unidades ?u1) (tipo ?t1))
?ofertai2 <- (object (is-a OFERTA_INICIAL) (unidades ?u2) (tipo ?t2))
?ronda <- (object (is-a RONDA) (id ?idRonda) (id_jugador_turno ?idJugT) (casilla ?casilla) (jugando_ronda ?jugando_ronda))
?fase1 <- (fase1_completada ?completada)
?pagarInteres <- (hay_que_pagar_intereses ?interes)
(test (eq ?idJ ?idJugT))
(test (eq ?casillaj ?casilla))
(test (eq ?jugando_ronda true))
(test (eq ?casillaj ?casillao1))
(test (eq ?casillaj ?casillao2))
(test (eq ?tipo1 ?t1))
(test (eq ?tipo2 ?t2))
(test (neq ?tipo1 ?tipo2))
(test (neq ?t1 ?t2))
(test (> ?uds1 0))
(test (> ?uds2 0))
(test (eq ?interes1 true))
(test (eq ?interes2 true))
(test (eq ?completada false))
(test (eq ?prestamo 0))
=>
(modify-instance ?ofertai1 (unidades (+ ?u1 ?uds1)))
(modify-instance ?ofertai2 (unidades (+ ?u2 ?uds2)))
(retract ?fase1)
(assert (fase1_completada true))
(retract ?pagarInteres)
(assert (hay_que_pagar_intereses true))
(printout t crlf)
(printout t "RONDA " ?idRonda " CASILLA " ?casilla crlf)
(printout t "El jugador " ?idJ " ha añadido a la oferta " ?uds1 " de " ?tipo1 crlf)
(printout t "El jugador " ?idJ " ha añadido a la oferta " ?uds2 " de " ?tipo2 crlf)
(printout t "Ademas, no ha pagado por los intereses porque no tiene ningun prestamo" crlf)
)

(defrule PagarInteresNoTienePrestamosJugador2
(declare (salience 50))
?jugador1 <- (object (is-a JUGADOR) (id ?idJ1) (casilla_ficha_barco ?casillaj1))
?jugador2 <- (object (is-a JUGADOR) (id ?idJ2) (francos ?francos2) (riqueza_total ?riqueza2) (prestamos ?prestamo2)) 
?ronda <- (object (is-a RONDA) (id ?idRonda) (id_jugador_turno ?idJugT) (casilla ?casilla) (jugando_ronda ?jugando_ronda))
?pagarInteres <- (hay_que_pagar_intereses ?interes)
(test (eq ?idJ1 ?idJugT))
(test (eq ?casillaj1 ?casilla))
(test (eq ?jugando_ronda true))
(test (eq ?interes true))
(test (eq ?prestamo2 0))
(test (neq ?idJ1 ?idJ2))
=>
(retract ?pagarInteres)
(assert (hay_que_pagar_intereses false))
(printout t crlf)
(printout t "El jugador " ?idJ2 " no ha pagado por los intereses porque no tiene ningun prestamo" crlf)
)

(defrule AñadirOfertaInteresTienePrestamosJugador1
?jugador <- (object (is-a JUGADOR) (id ?idJ) (casilla_ficha_barco ?casillaj) (francos ?francos) (riqueza_total ?riqueza) (prestamos ?prestamo)) 
?oferta1 <- (object (is-a OFERTA) (casilla ?casillao1) (interes ?interes1) (unidades_bienes ?uds1) (tipo_bienes ?tipo1))
?oferta2 <- (object (is-a OFERTA) (casilla ?casillao2) (interes ?interes2) (unidades_bienes ?uds2) (tipo_bienes ?tipo2))
?ofertai1 <- (object (is-a OFERTA_INICIAL) (unidades ?u1) (tipo ?t1))
?ofertai2 <- (object (is-a OFERTA_INICIAL) (unidades ?u2) (tipo ?t2))
?ronda <- (object (is-a RONDA) (id ?idRonda) (id_jugador_turno ?idJugT) (casilla ?casilla) (jugando_ronda ?jugando_ronda))
?fase1 <- (fase1_completada ?completada)
?pagarInteres <- (hay_que_pagar_intereses ?interes)
(test (eq ?idJ ?idJugT))
(test (eq ?casillaj ?casilla))
(test (eq ?jugando_ronda true))
(test (eq ?casillaj ?casillao1))
(test (eq ?casillaj ?casillao2))
(test (eq ?tipo1 ?t1))
(test (eq ?tipo2 ?t2))
(test (neq ?tipo1 ?tipo2))
(test (neq ?t1 ?t2))
(test (> ?uds1 0))
(test (> ?uds2 0))
(test (eq ?interes1 true))
(test (eq ?interes2 true))
(test (eq ?completada false))
(test (>= ?prestamo 1))
(test (>= ?francos 1))
=>
(modify-instance ?jugador (francos (- ?francos 1)) (riqueza_total (- ?riqueza 1)))
(modify-instance ?ofertai1 (unidades (+ ?u1 ?uds1)))
(modify-instance ?ofertai2 (unidades (+ ?u2 ?uds2)))
(retract ?fase1)
(assert (fase1_completada true))
(retract ?pagarInteres)
(assert (hay_que_pagar_intereses true))
(printout t crlf)
(printout t "RONDA " ?idRonda " CASILLA " ?casilla crlf)
(printout t "El jugador " ?idJ " ha añadido a la oferta " ?uds1 " de " ?tipo1 crlf)
(printout t "El jugador " ?idJ " ha añadido a la oferta " ?uds2 " de " ?tipo2 crlf)
(printout t "Ademas, ha pagado por los intereses porque tiene " ?prestamo " prestamos" crlf)
)

(defrule PagarInteresTienePrestamosJugador2
(declare (salience 50))
?jugador1 <- (object (is-a JUGADOR) (id ?idJ1) (casilla_ficha_barco ?casillaj1))
?jugador2 <- (object (is-a JUGADOR) (id ?idJ2) (francos ?francos2) (riqueza_total ?riqueza2) (prestamos ?prestamo2)) 
?ronda <- (object (is-a RONDA) (id ?idRonda) (id_jugador_turno ?idJugT) (casilla ?casilla) (jugando_ronda ?jugando_ronda))
?pagarInteres <- (hay_que_pagar_intereses ?interes)
(test (eq ?idJ1 ?idJugT))
(test (eq ?casillaj1 ?casilla))
(test (eq ?jugando_ronda true))
(test (eq ?interes true))
(test (>= ?prestamo2 1))
(test (>= ?francos2 1))
(test (neq ?idJ1 ?idJ2))
=>
(modify-instance ?jugador2 (francos (- ?francos2 1)) (riqueza_total (- ?riqueza2 1)))
(retract ?pagarInteres)
(assert (hay_que_pagar_intereses false))
(printout t crlf)
(printout t "El jugador " ?idJ2 " ha pagado por los intereses porque tiene " ?prestamo2 " prestamos" crlf)
)

(defrule AñadirOfertaInteresTienePrestamosNoDineroJugador1
?jugador <- (object (is-a JUGADOR) (id ?idJ) (casilla_ficha_barco ?casillaj) (francos ?francos) (riqueza_total ?riqueza) (prestamos ?prestamo)) 
?oferta1 <- (object (is-a OFERTA) (casilla ?casillao1) (interes ?interes1) (unidades_bienes ?uds1) (tipo_bienes ?tipo1))
?oferta2 <- (object (is-a OFERTA) (casilla ?casillao2) (interes ?interes2) (unidades_bienes ?uds2) (tipo_bienes ?tipo2))
?ofertai1 <- (object (is-a OFERTA_INICIAL) (unidades ?u1) (tipo ?t1))
?ofertai2 <- (object (is-a OFERTA_INICIAL) (unidades ?u2) (tipo ?t2))
?ronda <- (object (is-a RONDA) (id ?idRonda) (id_jugador_turno ?idJugT) (casilla ?casilla) (jugando_ronda ?jugando_ronda))
?fase1 <- (fase1_completada ?completada)
?pagarInteres <- (hay_que_pagar_intereses ?interes)
(test (eq ?idJ ?idJugT))
(test (eq ?casillaj ?casilla))
(test (eq ?jugando_ronda true))
(test (eq ?casillaj ?casillao1))
(test (eq ?casillaj ?casillao2))
(test (eq ?tipo1 ?t1))
(test (eq ?tipo2 ?t2))
(test (neq ?tipo1 ?tipo2))
(test (neq ?t1 ?t2))
(test (> ?uds1 0))
(test (> ?uds2 0))
(test (eq ?interes1 true))
(test (eq ?interes2 true))
(test (eq ?completada false))
(test (>= ?prestamo 1))
(test (eq ?francos 0))
=>
(modify-instance ?jugador (francos (+ ?francos 3)) (riqueza_total (+ ?riqueza 3)) (prestamos (+ ?prestamo 1)))
(modify-instance ?ofertai1 (unidades (+ ?u1 ?uds1)))
(modify-instance ?ofertai2 (unidades (+ ?u2 ?uds2)))
(retract ?fase1)
(assert (fase1_completada true))
(retract ?pagarInteres)
(assert (hay_que_pagar_intereses true))
(printout t crlf)
(printout t "RONDA " ?idRonda " CASILLA " ?casilla crlf)
(printout t "El jugador " ?idJ " ha añadido a la oferta " ?uds1 " de " ?tipo1 crlf)
(printout t "El jugador " ?idJ " ha añadido a la oferta " ?uds2 " de " ?tipo2 crlf)
(printout t "Ademas, ha tenido que pedir un prestamo para pagar los intereses" crlf)
)

(defrule PagarInteresTienePrestamosNoDineroJugador2
(declare (salience 50))
?jugador1 <- (object (is-a JUGADOR) (id ?idJ1) (casilla_ficha_barco ?casillaj1))
?jugador2 <- (object (is-a JUGADOR) (id ?idJ2) (francos ?francos2) (riqueza_total ?riqueza2) (prestamos ?prestamo2)) 
?ronda <- (object (is-a RONDA) (id ?idRonda) (id_jugador_turno ?idJugT) (casilla ?casilla) (jugando_ronda ?jugando_ronda))
?pagarInteres <- (hay_que_pagar_intereses ?interes)
(test (eq ?idJ1 ?idJugT))
(test (eq ?casillaj1 ?casilla))
(test (eq ?jugando_ronda true))
(test (eq ?interes true))
(test (>= ?prestamo2 1))
(test (eq ?francos2 0))
(test (neq ?idJ1 ?idJ2))
=>
(modify-instance ?jugador2 (francos (+ ?francos2 3)) (riqueza_total (+ ?riqueza2 3)) (prestamos (+ ?prestamo2 1)))
(retract ?pagarInteres)
(assert (hay_que_pagar_intereses false))
(printout t crlf)
(printout t "El jugador " ?idJ2 "  ha tenido que pedir un prestamo para pagar los intereses" crlf)
)

;////////////////////////////////////   FASE 2: ACCION PRINCIPAL   ///////////////////////////////////////////

;///////////////////////////////////    TOMAR BIENES    //////////////////////////////////////////////////////
(defrule TomarBienes
?ofertai <- (object (is-a OFERTA_INICIAL) (unidades ?uo) (tipo ?to))
?jugador <- (object (is-a JUGADOR) (id ?idj) (casilla_ficha_barco ?casillaj))
?bienes <- (object (is-a BIENES) (id ?idb) (unidades ?ub) (tipo ?tb))
?ronda <- (object (is-a RONDA) (id ?idRonda) (id_jugador_turno ?idJugT) (casilla ?casilla) (jugando_ronda ?jugando_ronda))
?fase1 <- (fase1_completada ?completada1)
?fase2 <- (fase2_completada ?completada2)
(test (eq ?idj ?idJugT))
(test (eq ?casillaj ?casilla))
(test (eq ?jugando_ronda true))
(test (eq ?idj ?idb))
(test (eq ?to ?tb))
(test (neq ?to Francos))
(test (> ?uo 0))
(test (eq ?completada1 true))
(test (eq ?completada2 false))
=>
(modify-instance ?bienes (unidades (+ ?ub ?uo)))
(modify-instance ?ofertai (unidades 0))
(retract ?fase2)
(assert (fase2_completada true))
(printout t crlf)
(printout t "El jugador " ?idj " ha tomado los bienes " ?uo " de " ?to crlf)
)

(defrule TomarFrancosOferta
?ofertai <- (object (is-a OFERTA_INICIAL) (unidades ?uo) (tipo ?to)) 
?jugador <- (object (is-a JUGADOR) (id ?idj) (casilla_ficha_barco ?casillaj) (francos ?f) (riqueza_total ?riqueza))
?ronda <- (object (is-a RONDA) (id ?idRonda) (id_jugador_turno ?idJugT) (casilla ?casilla) (jugando_ronda ?jugando_ronda))
?fase1 <- (fase1_completada ?completada1)
?fase2 <- (fase2_completada ?completada2)
(test (eq ?idj ?idJugT))
(test (eq ?casillaj ?casilla))
(test (eq ?jugando_ronda true))
(test (eq ?to Francos))
(test (> ?uo 0))
(test (eq ?completada1 true))
(test (eq ?completada2 false))
=>
(modify-instance ?jugador (francos (+ ?f ?uo)) (riqueza_total (+ ?riqueza ?uo)))
(modify-instance ?ofertai (unidades 0))
(retract ?fase2)
(assert (fase2_completada true))
(printout t crlf)
(printout t "El jugador " ?idj " ha tomado " ?uo " francos" crlf)
)

;/////////////////////////////////////////////    MOVER PERSONA    //////////////////////////////////////////////////////
(defrule MoverPersonaEdificioMunicipalInicialConstruido
?edificio <- (object (is-a EDIFICIO) (nombre ?nom) (coste_entrada ?costeEnt) (id ?id) (construido ?construido))
?jugador1 <- (object (is-a JUGADOR) (id ?idJug1) (disco_persona ?disco1) (casilla_ficha_barco ?casillaj) (francos ?francos1) (riqueza_total ?rTotal1))
?jugador2 <- (object (is-a JUGADOR) (id ?idJug2) (disco_persona ?disco2))
?ronda <- (object (is-a RONDA) (id ?idRonda) (id_jugador_turno ?idJugT) (casilla ?casilla) (jugando_ronda ?jugando_ronda))
?fase1 <- (fase1_completada ?completada1)
?fase2 <- (fase2_completada ?completada2)
?hay_que_construir <- (hay_que_construir ?construir)
(test (eq ?idJug1 ?idJugT))
(test (eq ?casillaj ?casilla))
(test (eq ?jugando_ronda true))
(test (neq ?idJug1 ?idJug2))
(test (eq ?construido true))
(test (eq ?id 0))
(test (neq ?disco2 ?nom))
(test (eq ?completada1 true))
(test (eq ?completada2 false))
(test (eq ?construir false))
(test (or (eq ?nom B1) (eq ?nom B2) (eq ?nom B3)))
(test (>= ?francos1 ?costeEnt))
=>
(modify-instance ?jugador1 (disco_persona ?nom) (francos (- ?francos1 ?costeEnt)) (riqueza_total (- ?rTotal1 ?costeEnt)))
(retract ?fase2)
(assert (fase2_completada true))
(retract ?hay_que_construir)
(assert (hay_que_construir true))
(printout t crlf)
(printout t "El jugador " ?idJug1 " se ha movido al edificio " ?nom ", propiedad del Municipio" crlf)
)

(defrule MoverPersonaEdificioMunicipalNoInicialConstruido
?edificio <- (object (is-a EDIFICIO) (nombre ?nom) (coste_entrada ?costeEnt) (id ?id) (construido ?construido))
?jugador1 <- (object (is-a JUGADOR) (id ?idJug1) (disco_persona ?disco1) (casilla_ficha_barco ?casillaj) (francos ?francos1) (riqueza_total ?rTotal1))
?jugador2 <- (object (is-a JUGADOR) (id ?idJug2) (disco_persona ?disco2))
?ronda <- (object (is-a RONDA) (id ?idRonda) (id_jugador_turno ?idJugT) (casilla ?casilla) (jugando_ronda ?jugando_ronda))
?fase1 <- (fase1_completada ?completada1)
?fase2 <- (fase2_completada ?completada2)
?hay_que_construir <- (hay_que_construir ?construir)
(test (eq ?idJug1 ?idJugT))
(test (eq ?casillaj ?casilla))
(test (eq ?jugando_ronda true))
(test (neq ?idJug1 ?idJug2))
(test (eq ?construido true))
(test (eq ?id 0))
(test (neq ?disco2 ?nom))
(test (eq ?completada1 true))
(test (eq ?completada2 false))
(test (eq ?construir false))
(test (or (neq ?nom B1) (neq ?nom B2) (neq ?nom B3)))
(test (>= ?francos1 ?costeEnt))
=>
(modify-instance ?jugador1 (disco_persona ?nom) (francos (- ?francos1 ?costeEnt)) (riqueza_total (- ?rTotal1 ?costeEnt)))
(retract ?fase2)
(assert (fase2_completada true))
(retract ?hay_que_construir)
(assert (hay_que_construir true))
(printout t crlf)
(printout t "El jugador " ?idJug1 " se ha movido al edificio " ?nom ", propiedad del Municipio" crlf)
)

(defrule MoverPersonaEdificioJugadorConstruidoConAccion
?edificio <- (object (is-a EDIFICIO) (nombre ?nom) (coste_entrada ?costeEnt) (id ?id) (construido ?construido) (accion_unidades ?udsAc) (accion_tipo ?tAc))
?jugador1 <- (object (is-a JUGADOR) (id ?idJug1) (casilla_ficha_barco ?casillaj) (francos ?francos1) (riqueza_total ?rTotal1))
?jugador2 <- (object (is-a JUGADOR) (id ?idJug2) (disco_persona ?disco2) (francos ?francos2) (riqueza_total ?rTotal2))
?bienes <- (object (is-a BIENES) (id ?idB) (unidades ?ub) (tipo ?tb))
?ronda <- (object (is-a RONDA) (id ?idRonda) (id_jugador_turno ?idJugT) (casilla ?casilla) (jugando_ronda ?jugando_ronda))
?fase1 <- (fase1_completada ?completada1)
?fase2 <- (fase2_completada ?completada2)
(test (eq ?idJug1 ?idJugT))
(test (eq ?casillaj ?casilla))
(test (eq ?jugando_ronda true))
(test (neq ?idJug1 ?idJug2))
(test (eq ?construido true))
(test (neq ?id 0))
(test (neq ?disco2 ?nom))
(test (eq ?idJug1 ?idB))
(test (neq ?tAc Ninguno))
(test (eq ?tb ?tAc))
(test (eq ?completada1 true))
(test (eq ?completada2 false))
(test (>= ?francos1 ?costeEnt))
=>
(modify-instance ?jugador1 (disco_persona ?nom) (francos (- ?francos1 ?costeEnt)) (riqueza_total (- ?rTotal1 ?costeEnt)))
(modify-instance ?jugador2 (francos (+ ?francos2 ?costeEnt)) (riqueza_total (+ ?rTotal2 ?costeEnt)))
(modify-instance ?bienes (unidades (+ ?ub ?udsAc)))
(retract ?fase2)
(assert (fase2_completada true))
(printout t crlf)
(printout t "El jugador " ?idJug1 " se ha movido al edificio " ?nom ", propiedad del jugador " ?id crlf)
(printout t "Ademas, ha obtenido " ?udsAc " bienes de tipo " ?tAc " al realizar la accion del edificio" crlf)
)

(defrule MoverPersonaEdificioJugadorConstruidoSinAccion
?edificio <- (object (is-a EDIFICIO) (nombre ?nom) (coste_entrada ?costeEnt) (id ?id) (construido ?construido) (accion_tipo ?tAc))
?jugador1 <- (object (is-a JUGADOR) (id ?idJug1) (casilla_ficha_barco ?casillaj) (francos ?francos1) (riqueza_total ?rTotal1))
?jugador2 <- (object (is-a JUGADOR) (id ?idJug2) (disco_persona ?disco2) (francos ?francos2) (riqueza_total ?rTotal2))
?ronda <- (object (is-a RONDA) (id ?idRonda) (id_jugador_turno ?idJugT) (casilla ?casilla) (jugando_ronda ?jugando_ronda))
?fase1 <- (fase1_completada ?completada1)
?fase2 <- (fase2_completada ?completada2)
?hay_que_construir <- (hay_que_construir ?construir)
(test (eq ?idJug1 ?idJugT))
(test (eq ?casillaj ?casilla))
(test (eq ?jugando_ronda true))
(test (neq ?idJug1 ?idJug2))
(test (eq ?construido true))
(test (neq ?id 0))
(test (neq ?disco2 ?nom))
(test (eq ?tAc Ninguno))
(test (eq ?completada1 true))
(test (eq ?completada2 false))
(test (eq ?construir false))
(test (>= ?francos1 ?costeEnt))
=>
(modify-instance ?jugador1 (disco_persona ?nom) (francos (- ?francos1 ?costeEnt)) (riqueza_total (- ?rTotal1 ?costeEnt)))
(modify-instance ?jugador2 (francos (+ ?francos2 ?costeEnt)) (riqueza_total (+ ?rTotal2 ?costeEnt)))
(retract ?fase2)
(assert (fase2_completada true))
(retract ?hay_que_construir)
(assert (hay_que_construir true))
(printout t crlf)
(printout t "El jugador " ?idJug1 " se ha movido al edificio " ?nom ", propiedad del jugador " ?id crlf)
)

;///////////////////////////////////    CONSTRUIR EDIFICIO    //////////////////////////////////////////////////////
(defrule ConstruirEdificioConCosteTieneMateriales
(declare (salience 50))
?edificio <- (object (is-a EDIFICIO) (nombre ?nom) (coste_construccion_unidades ?unidades) (coste_construccion_tipo ?tEd) (valor_venta ?valor) (coste_entrada ?costeEnt) (id ?id) (construido ?construido))
?jugador <- (object (is-a JUGADOR) (id ?idJug) (casilla_ficha_barco ?casillaj) (disco_persona ?disco) (francos ?francos) (riqueza_total ?riqueza))
?ronda <- (object (is-a RONDA) (id ?idRonda) (id_jugador_turno ?idJugT) (casilla ?casilla) (jugando_ronda ?jugando_ronda))
?bien <- (object (is-a BIENES) (id ?idBien) (unidades ?ud) (tipo ?tBien))
?fase1 <- (fase1_completada ?completada1)
?fase2 <- (fase2_completada ?completada2)
?hay_que_construir <- (hay_que_construir ?construir)
(test (eq ?idJug ?idJugT))
(test (eq ?casillaj ?casilla))
(test (eq ?jugando_ronda true))
(test (eq ?construido false))
(test (neq ?tEd Ninguno))
(test (eq ?idBien ?idJug))
(test (eq ?tEd ?tBien))
(test (>= ?ud ?unidades))
(test (eq ?completada1 true))
(test (eq ?completada2 true))
(test (eq ?construir true))
=>
(modify-instance ?jugador (riqueza_total (+ ?riqueza ?valor)))
(modify-instance ?edificio (id ?idJug) (construido true))
(modify-instance ?bien (unidades (- ?ud ?unidades)))
(retract ?hay_que_construir)
(assert (hay_que_construir false))
(printout t crlf)
(printout t "El jugador " ?idJug " ha construido el edificio " ?nom crlf)
)

(defrule ConstruirEdificioConCosteNoTieneMateriales
(declare (salience 50))
?edificio <- (object (is-a EDIFICIO) (nombre ?nom) (coste_construccion_unidades ?unidades) (coste_construccion_tipo ?tEd) (valor_venta ?valor) (coste_entrada ?costeEnt) (id ?id) (construido ?construido))
?jugador <- (object (is-a JUGADOR) (id ?idJug) (casilla_ficha_barco ?casillaj) (disco_persona ?disco) (francos ?francos) (riqueza_total ?riqueza))
?ronda <- (object (is-a RONDA) (id ?idRonda) (id_jugador_turno ?idJugT) (casilla ?casilla) (jugando_ronda ?jugando_ronda))
?bien <- (object (is-a BIENES) (id ?idBien) (unidades ?ud) (tipo ?tBien))
?fase1 <- (fase1_completada ?completada1)
?fase2 <- (fase2_completada ?completada2)
?hay_que_construir <- (hay_que_construir ?construir)
(test (eq ?idJug ?idJugT))
(test (eq ?casillaj ?casilla))
(test (eq ?jugando_ronda true))
(test (eq ?construido false))
(test (neq ?tEd Ninguno))
(test (eq ?idBien ?idJug))
(test (eq ?tEd ?tBien))
(test (< ?ud ?unidades))
(test (eq ?completada1 true))
(test (eq ?completada2 true))
(test (eq ?construir true))
=>
(retract ?hay_que_construir)
(assert (hay_que_construir false))
(printout t crlf)
(printout t "El jugador " ?idJug " no ha podido construir el edificio " ?nom  " porque no tiene materiales suficientes" crlf)
)

(defrule ConstruirEdificioSinCoste
(declare (salience 50))
?edificio <- (object (is-a EDIFICIO) (nombre ?nom) (coste_construccion_tipo ?tEd) (id ?id) (construido ?construido) (valor_venta ?valor))
?jugador <- (object (is-a JUGADOR) (id ?idJug) (casilla_ficha_barco ?casillaj) (disco_persona ?disco) (francos ?francos) (riqueza_total ?riqueza))
?ronda <- (object (is-a RONDA) (id ?idRonda) (id_jugador_turno ?idJugT) (casilla ?casilla) (jugando_ronda ?jugando_ronda))
?fase1 <- (fase1_completada ?completada1)
?fase2 <- (fase2_completada ?completada2)
?hay_que_construir <- (hay_que_construir ?construir)
(test (eq ?idJug ?idJugT))
(test (eq ?casillaj ?casilla))
(test (eq ?jugando_ronda true))
(test (eq ?construido false))
(test (eq ?tEd Ninguno))
(test (eq ?completada1 true))
(test (eq ?completada2 true))
(test (eq ?construir true))
=>
(modify-instance ?jugador (riqueza_total (+ ?riqueza ?valor)))
(modify-instance ?edificio (id ?idJug) (construido true))
(retract ?hay_que_construir)
(assert (hay_que_construir false))
(printout t crlf)
(printout t "El jugador " ?idJug " ha construido el edificio " ?nom crlf)
)

;///////////////////////////////////    COMPRAR EDIFICIO    //////////////////////////////////////////////////////
(defrule ComprarEdificioMunicipalVacio
?edificio <- (object (is-a EDIFICIO) (nombre ?nom) (valor_venta ?valor) (id ?id) (construido ?construido))
?jugador1 <- (object (is-a JUGADOR) (id ?idJug1) (casilla_ficha_barco ?casillaj) (francos ?francos1) (riqueza_total ?rTotal1))
?jugador2 <- (object (is-a JUGADOR) (id ?idJug2) (disco_persona ?disco2))
?ronda <- (object (is-a RONDA) (id ?idRonda) (id_jugador_turno ?idJugT) (casilla ?casilla) (jugando_ronda ?jugando_ronda))
?fase1 <- (fase1_completada ?completada1)
?fase2 <- (fase2_completada ?completada2)
?ha_comprado <- (ha_comprado ?comprado)
(test (eq ?idJug1 ?idJugT))
(test (eq ?casillaj ?casilla))
(test (eq ?jugando_ronda true))
(test (neq ?idJug1 ?idJug2))
(test (eq ?construido true))
(test (eq ?id 0))
(test (neq ?disco2 ?nom))
(test (eq ?completada1 true))
(test (eq ?completada2 true))
(test (eq ?comprado false))
(test (>= ?francos1 ?valor))
=>
(modify-instance ?edificio (id ?idJug1))
(modify-instance ?jugador1 (francos (- ?francos1 ?valor)))
(retract ?ha_comprado)
(assert (ha_comprado true))
(printout t crlf)
(printout t "El jugador " ?idJug1 " ha comprado el edificio " ?nom crlf)
)

(defrule ComprarEdificioMunicipalLleno
?edificio <- (object (is-a EDIFICIO) (nombre ?nom) (valor_venta ?valor) (id ?id) (construido ?construido))
?jugador1 <- (object (is-a JUGADOR) (id ?idJug1) (casilla_ficha_barco ?casillaj) (francos ?francos1) (riqueza_total ?rTotal1))
?jugador2 <- (object (is-a JUGADOR) (id ?idJug2) (disco_persona ?disco2))
?ronda <- (object (is-a RONDA) (id ?idRonda) (id_jugador_turno ?idJugT) (casilla ?casilla) (jugando_ronda ?jugando_ronda))
?fase1 <- (fase1_completada ?completada1)
?fase2 <- (fase2_completada ?completada2)
?ha_comprado <- (ha_comprado ?comprado)
(test (eq ?idJug1 ?idJugT))
(test (eq ?casillaj ?casilla))
(test (eq ?jugando_ronda true))
(test (neq ?idJug1 ?idJug2))
(test (eq ?construido true))
(test (eq ?id 0))
(test (eq ?disco2 ?nom))
(test (eq ?completada1 true))
(test (eq ?completada2 true))
(test (eq ?comprado false))
(test (>= ?francos1 ?valor))
=>
(modify-instance ?edificio (id ?idJug1))
(modify-instance ?jugador1 (francos (- ?francos1 ?valor)))
(modify-instance ?jugador1 (disco_persona edNoAsignado))
(retract ?ha_comprado)
(assert (ha_comprado true))
(printout t crlf)
(printout t "El jugador " ?idJug1 " ha comprado el edificio " ?nom crlf)
(printout t "Ademas, el jugador " ?idJug2 ", que estaba ahi, ha vuelto a su casa" crlf)
)

;///////////////////////////////////    VENDER EDIFICIO    //////////////////////////////////////////////////////
(defrule VenderEdificioJugadorVacio
?edificio <- (object (is-a EDIFICIO) (nombre ?nom) (valor_venta ?valor) (id ?id) (construido ?construido))
?jugador1 <- (object (is-a JUGADOR) (id ?idJug1) (casilla_ficha_barco ?casillaj) (francos ?francos1) (riqueza_total ?rTotal1))
?jugador2 <- (object (is-a JUGADOR) (id ?idJug2) (disco_persona ?disco2))
?ronda <- (object (is-a RONDA) (id ?idRonda) (id_jugador_turno ?idJugT) (casilla ?casilla) (jugando_ronda ?jugando_ronda))
?fase1 <- (fase1_completada ?completada1)
?fase2 <- (fase2_completada ?completada2)
?ha_comprado <- (ha_comprado ?comprado)
(test (eq ?idJug1 ?idJugT))
(test (eq ?casillaj ?casilla))
(test (eq ?jugando_ronda true))
(test (neq ?idJug1 ?idJug2))
(test (eq ?construido true))
(test (neq ?id 0))
(test (neq ?disco2 ?nom))
(test (eq ?completada1 true))
(test (eq ?completada2 true))
(test (eq ?comprado false))
=>
(modify-instance ?edificio (id 0))
(modify-instance ?jugador1 (francos (+ ?francos1(/ ?valor 2))) (riqueza_total (- ?rTotal1 (/ ?valor 2))))
(printout t crlf)
(printout t "El jugador " ?idJug1 " ha vendido el edificio " ?nom crlf)
)

(defrule VenderEdificioJugadorLleno
?edificio <- (object (is-a EDIFICIO) (nombre ?nom) (valor_venta ?valor) (id ?id) (construido ?construido))
?jugador1 <- (object (is-a JUGADOR) (id ?idJug1) (casilla_ficha_barco ?casillaj) (disco_persona ?disco1) (francos ?francos1) (riqueza_total ?rTotal1))
?jugador2 <- (object (is-a JUGADOR) (id ?idJug2) (disco_persona ?disco2))
?ronda <- (object (is-a RONDA) (id ?idRonda) (id_jugador_turno ?idJugT) (casilla ?casilla) (jugando_ronda ?jugando_ronda))
?fase1 <- (fase1_completada ?completada1)
?fase2 <- (fase2_completada ?completada2)
?ha_comprado <- (ha_comprado ?comprado)
(test (eq ?idJug1 ?idJugT))
(test (eq ?casillaj ?casilla))
(test (eq ?jugando_ronda true))
(test (neq ?idJug1 ?idJug2))
(test (eq ?construido true))
(test (neq ?id 0))
(test (eq ?disco2 ?nom))
(test (eq ?completada1 true))
(test (eq ?completada2 true))
(test (eq ?comprado false))
=>
(modify-instance ?edificio (id 0))
(modify-instance ?jugador1 (francos (+ ?francos1(/ ?valor 2))) (riqueza_total (- ?rTotal1 (/ ?valor 2))))
(modify-instance ?jugador2 (disco_persona edNoAsignado))
(printout t crlf)
(printout t "El jugador " ?idJug1 " ha vendido el edificio " ?nom crlf)
(printout t "Ademas, el jugador " ?idJug2 ", que estaba ahi, ha vuelto a su casa" crlf)
)

;///////////////////////////////////    PAGAR PRESTAMOS    //////////////////////////////////////////////////////
(defrule PagarPrestamos
?jugador <- (object (is-a JUGADOR) (id ?idJug) (prestamos ?prestamo) (disco_persona ?disco) (francos ?francos) (riqueza_total ?rTotal))
(test (> ?francos 4))
(test (> ?prestamo 0))
=>
(modify-instance ?jugador (francos (- ?francos 5)) (prestamos (- ?prestamo 1)) (riqueza_total (- ?rTotal 5)))
(printout t crlf)
(printout t "El jugador " ?idJug " ha pagado un prestamo" crlf)
)

;///////////////////////////////////    PEDIR PRESTAMOS    //////////////////////////////////////////////////////
(defrule PedirPrestamo
(declare (salience 75))
?jugador <- (object (is-a JUGADOR) (id ?idJug) (prestamos ?prestamo) (disco_persona ?disco) (francos ?francos) (riqueza_total ?rTotal))
(test (< ?francos 0))
=>
(modify-instance ?jugador (francos (+ ?francos 4)) (prestamos (+ ?prestamo 1)) (riqueza_total (+ ?rTotal 4)))
(printout t crlf)
(printout t "El jugador " ?idJug " ha pedido un prestamo" crlf)
)

;///////////////////////////////////    CAMBIO DE TURNO    //////////////////////////////////////////////////////
(defrule CambiarTurno
?jugador1 <- (object (is-a JUGADOR) (id ?idJug1) (casilla_ficha_barco ?casillaj) (francos ?francos1) (riqueza_total ?riqueza1) (ha_pagado_comida ?pagado1))
?jugador2 <- (object (is-a JUGADOR) (id ?idJug2) (francos ?francos2) (riqueza_total ?riqueza2) (ha_pagado_comida ?pagado2))
?ronda <- (object (is-a RONDA) (id ?idRonda) (id_jugador_turno ?idJugT) (casilla ?casilla) (jugando_ronda ?jugando_ronda))
?bien1 <- (object (is-a BIENES) (id ?idBien1) (unidades ?ud1) (tipo ?tBien1))
?bien2 <- (object (is-a BIENES) (id ?idBien2) (unidades ?ud2) (tipo ?tBien2))
?fase1 <- (fase1_completada ?completada1)
?fase2 <- (fase2_completada ?completada2)
(test (eq ?idJug1 ?idJugT))
(test (eq ?casillaj ?casilla))
(test (eq ?jugando_ronda true))
(test (neq ?idJug2 ?idJug1))
(test (eq ?idJug1 ?idBien1))
(test (eq ?idJug2 ?idBien2))
(test (eq ?tBien1 Vaca))
(test (eq ?tBien2 Vaca))
(test (eq ?completada1 true))
(test (eq ?completada2 true))
(test (neq ?casillaj 7))
=>
(modify-instance ?jugador1 (casilla_ficha_barco (+ ?casillaj 2)))
(modify-instance ?ronda (id_jugador_turno ?idJug2) (casilla (+ ?casilla 1)))
(retract ?fase1)
(assert (fase1_completada false))
(retract ?fase2)
(assert (fase2_completada false))
(printout t crlf)
(printout t "Avanzamos a la casilla " (+ ?casilla 1) crlf)
(printout t "El turno pasa del jugador " ?idJug1 " al jugador " ?idJug2 crlf)
(printout t "El jugador " ?idJug1 " tiene " ?francos1 " francos, " ?ud1 " unidades de comida y " ?riqueza1 " de riqueza total a falta de restar los prestamos" crlf)
(printout t "El jugador " ?idJug2 " tiene " ?francos2 " francos, " ?ud2 " unidades de comida y " ?riqueza2 " de riqueza total a falta de restar los prestamos" crlf)
)

;//////////////////////////////////////    COSECHAR    /////////////////////////////////////////////////////////
(defrule RecogerCosechaJugador1
(declare (salience 50))
?jugador1 <- (object (is-a JUGADOR) (id ?idJug) (ha_cosechado ?cosechado))
?ronda <- (object (is-a RONDA) (id ?idRonda) (id_jugador_turno ?idJugT) (casilla ?casilla) (cosecha ?cosecha) (comida_a_pagar ?comidaP) (jugando_ronda ?jugando_ronda))
?bien <- (object (is-a BIENES) (id ?idBien) (unidades ?ud) (tipo ?tBien))
?fase1 <- (fase1_completada ?completada1)
?fase2 <- (fase2_completada ?completada2)
(test (eq ?casilla 7))
(test (eq ?idJug ?idJugT))
(test (eq ?jugando_ronda true))
(test (eq ?cosecha true))
(test (eq ?idJug ?idBien))
(test (eq ?tBien Vaca))
(test (> ?ud 1))
(test (eq ?completada1 true))
(test (eq ?completada2 true))
(test (eq ?cosechado false))
=>
(modify-instance ?bien (unidades (+ ?ud 1)))
(modify-instance ?jugador1 (ha_cosechado true))
(printout t crlf)
(printout t "El jugador " ?idJug " ha recibido una vaca por la cosecha " crlf)
)

(defrule RecogerCosechaJugador2
(declare (salience 50))
?jugador1 <- (object (is-a JUGADOR) (id ?idJug1))
?jugador2 <- (object (is-a JUGADOR) (id ?idJug2) (ha_cosechado ?cosechado))
?ronda <- (object (is-a RONDA) (id ?idRonda) (id_jugador_turno ?idJugT) (casilla ?casilla) (cosecha ?cosecha) (comida_a_pagar ?comidaP) (jugando_ronda ?jugando_ronda))
?bien <- (object (is-a BIENES) (id ?idBien) (unidades ?ud) (tipo ?tBien))
?fase1 <- (fase1_completada ?completada1)
?fase2 <- (fase2_completada ?completada2)
(test (eq ?casilla 7))
(test (eq ?idJug1 ?idJugT))
(test (eq ?jugando_ronda true))
(test (eq ?cosecha true))
(test (neq ?idJug1 ?idJug2))
(test (eq ?idJug2 ?idBien))
(test (eq ?tBien Vaca))
(test (> ?ud 1))
(test (eq ?completada1 true))
(test (eq ?completada2 true))
(test (eq ?cosechado false))
=>
(modify-instance ?bien (unidades (+ ?ud 1)))
(modify-instance ?jugador2 (ha_cosechado true))
(printout t crlf)
(printout t "El jugador " ?idJug2 " ha recibido una vaca por la cosecha " crlf)
)

;////////////////////////////////////////////    PAGAR COMIDA J1     ////////////////////////////////////////////////////////
(defrule AlimentarTieneComidaJugador1
?jugador1 <- (object (is-a JUGADOR) (id ?idJug1) (ha_pagado_comida ?pagado))
?jugador2 <- (object (is-a JUGADOR) (id ?idJug2))
?ronda <- (object (is-a RONDA) (id ?idRonda1) (id_jugador_turno ?idJugT) (casilla ?casilla) (comida_a_pagar ?comidaP) (jugando_ronda ?jugando_ronda))
?bien <- (object (is-a BIENES) (id ?idBien) (unidades ?ud) (tipo ?tBien))
?fase1 <- (fase1_completada ?completada1)
?fase2 <- (fase2_completada ?completada2)
(test (eq ?casilla 7))
(test (eq ?idJug1 ?idJugT))
(test (eq ?jugando_ronda true))
(test (eq ?idJug1 ?idBien))
(test (neq ?idJug1 ?idJug2))
(test (eq ?tBien Vaca))
(test (>= ?ud ?comidaP))
(test (eq ?completada1 true))
(test (eq ?completada2 true))
(test (eq ?pagado false))
=>
(modify-instance ?jugador1 (ha_pagado_comida true))
(modify-instance ?bien (unidades (- ?ud ?comidaP)))
(printout t crlf)
(printout t "El jugador " ?idJug1 " ha pagado " ?comidaP " unidades de comida" crlf)
)

(defrule AlimentarNoTieneComidaPeroSiDineroJugador1
?jugador1 <- (object (is-a JUGADOR) (id ?idJug1) (francos ?francos) (riqueza_total ?riqueza) (ha_pagado_comida ?pagado))
?jugador2 <- (object (is-a JUGADOR) (id ?idJug2))
?ronda1 <- (object (is-a RONDA) (id ?idRonda1) (id_jugador_turno ?idJugT) (casilla ?casilla) (comida_a_pagar ?comidaP) (jugando_ronda ?jugando_ronda))
?bien <- (object (is-a BIENES) (id ?idBien) (unidades ?ud) (tipo ?tBien))
?fase1 <- (fase1_completada ?completada1)
?fase2 <- (fase2_completada ?completada2)
(test (eq ?casilla 7))
(test (eq ?idJug1 ?idJugT))
(test (eq ?jugando_ronda true))
(test (eq ?idJug1 ?idBien))
(test (neq ?idJug1 ?idJug2))
(test (eq ?tBien Vaca))
(test (< ?ud ?comidaP))
(test (>= ?francos ?comidaP))
(test (eq ?completada1 true))
(test (eq ?completada2 true))
(test (eq ?pagado false))
=>
(modify-instance ?jugador1 (francos (- ?francos ?comidaP)) (riqueza_total (- ?riqueza ?comidaP)) (ha_pagado_comida true))
(printout t crlf)
(printout t "El jugador " ?idJug1 " no tenia suficiente comida, asi que ha pagado con dinero" crlf)
)

(defrule AlimentarNoTieneComidaNiDineroJugador1
?jugador1 <- (object (is-a JUGADOR) (id ?idJug1) (francos ?francos) (prestamos ?prestamo) (riqueza_total ?riqueza) (ha_pagado_comida ?pagado))
?jugador2 <- (object (is-a JUGADOR) (id ?idJug2))
?ronda1 <- (object (is-a RONDA) (id ?idRonda1) (id_jugador_turno ?idJugT) (casilla ?casilla) (comida_a_pagar ?comidaP) (jugando_ronda ?jugando_ronda))
?bien <- (object (is-a BIENES) (id ?idBien) (unidades ?ud) (tipo ?tBien))
?fase1 <- (fase1_completada ?completada1)
?fase2 <- (fase2_completada ?completada2)
(test (eq ?casilla 7))
(test (eq ?idJug1 ?idJugT))
(test (eq ?jugando_ronda true))
(test (neq ?idJug1 ?idJug2))
(test (eq ?idJug1 ?idBien))
(test (eq ?tBien Vaca))
(test (< ?ud ?comidaP))
(test (< ?francos ?comidaP))
(test (eq ?completada1 true))
(test (eq ?completada2 true))
(test (eq ?pagado false))
=>
(modify-instance ?jugador1 (francos (+ ?francos (- 4 ?comidaP))) (prestamos (+ ?prestamo 1)) (riqueza_total (+ ?riqueza (- 4 ?comidaP))) (ha_pagado_comida true))
(printout t crlf)
(printout t "El jugador " ?idJug1 " no tenia suficiente comida ni dinero, asi que ha tenido que pedir un prestamo" crlf)
)

;////////////////////////////////////////////    PAGAR COMIDA J2     ////////////////////////////////////////////////////////
(defrule AlimentarTieneComidaJugador2
?jugador1 <- (object (is-a JUGADOR) (id ?idJug1))
?jugador2 <- (object (is-a JUGADOR) (id ?idJug2) (ha_pagado_comida ?pagado))
?ronda <- (object (is-a RONDA) (id ?idRonda1) (id_jugador_turno ?idJugT) (casilla ?casilla) (comida_a_pagar ?comidaP) (jugando_ronda ?jugando_ronda))
?bien <- (object (is-a BIENES) (id ?idBien) (unidades ?ud) (tipo ?tBien))
?fase1 <- (fase1_completada ?completada1)
?fase2 <- (fase2_completada ?completada2)
(test (eq ?casilla 7))
(test (eq ?idJug1 ?idJugT))
(test (eq ?jugando_ronda true))
(test (eq ?idJug2 ?idBien))
(test (neq ?idJug1 ?idJug2))
(test (eq ?tBien Vaca))
(test (>= ?ud ?comidaP))
(test (eq ?completada1 true))
(test (eq ?completada2 true))
(test (eq ?pagado false))
=>
(modify-instance ?jugador2 (ha_pagado_comida true))
(modify-instance ?bien (unidades (- ?ud ?comidaP)))
(printout t crlf)
(printout t "El jugador " ?idJug2 " ha pagado " ?comidaP " unidades de comida" crlf)
)

(defrule AlimentarNoTieneComidaPeroSiDineroJugador2
?jugador1 <- (object (is-a JUGADOR) (id ?idJug1))
?jugador2 <- (object (is-a JUGADOR) (id ?idJug2) (francos ?francos) (riqueza_total ?riqueza) (ha_pagado_comida ?pagado))
?ronda1 <- (object (is-a RONDA) (id ?idRonda1) (id_jugador_turno ?idJugT) (casilla ?casilla) (comida_a_pagar ?comidaP) (jugando_ronda ?jugando_ronda))
?bien <- (object (is-a BIENES) (id ?idBien) (unidades ?ud) (tipo ?tBien))
?fase1 <- (fase1_completada ?completada1)
?fase2 <- (fase2_completada ?completada2)
(test (eq ?casilla 7))
(test (eq ?idJug1 ?idJugT))
(test (eq ?jugando_ronda true))
(test (eq ?idJug2 ?idBien))
(test (neq ?idJug1 ?idJug2))
(test (eq ?tBien Vaca))
(test (< ?ud ?comidaP))
(test (>= ?francos ?comidaP))
(test (eq ?completada1 true))
(test (eq ?completada2 true))
(test (eq ?pagado false))
=>
(modify-instance ?jugador2 (francos (- ?francos ?comidaP)) (riqueza_total (- ?riqueza ?comidaP)) (ha_pagado_comida true))
(printout t crlf)
(printout t "El jugador " ?idJug2 " no tenia suficiente comida, asi que ha pagado con dinero" crlf)
)

(defrule AlimentarNoTieneComidaNiDineroJugador2
?jugador1 <- (object (is-a JUGADOR) (id ?idJug1))
?jugador2 <- (object (is-a JUGADOR) (id ?idJug2) (francos ?francos) (prestamos ?prestamo) (riqueza_total ?riqueza) (ha_pagado_comida ?pagado))
?ronda1 <- (object (is-a RONDA) (id ?idRonda1) (id_jugador_turno ?idJugT) (casilla ?casilla) (comida_a_pagar ?comidaP) (jugando_ronda ?jugando_ronda))
?bien <- (object (is-a BIENES) (id ?idBien) (unidades ?ud) (tipo ?tBien))
?fase1 <- (fase1_completada ?completada1)
?fase2 <- (fase2_completada ?completada2)
(test (eq ?casilla 7))
(test (eq ?idJug1 ?idJugT))
(test (eq ?jugando_ronda true))
(test (neq ?idJug1 ?idJug2))
(test (eq ?idJug2 ?idBien))
(test (eq ?tBien Vaca))
(test (< ?ud ?comidaP))
(test (< ?francos ?comidaP))
(test (eq ?completada1 true))
(test (eq ?completada2 true))
(test (eq ?pagado false))
=>
(modify-instance ?jugador2 (francos (+ ?francos (- 4 ?comidaP))) (prestamos (+ ?prestamo 1)) (riqueza_total (+ ?riqueza (- 4 ?comidaP))) (ha_pagado_comida true))
(printout t crlf)
(printout t "El jugador " ?idJug2 " no tenia suficiente comida ni dinero, asi que ha tenido que pedir un prestamo" crlf)
)

;///////////////////////////////////////////////////   FINALIZAR RONDA   ////////////////////////////////////////////////////
(defrule FinalizarRonda
?jugador1 <- (object (is-a JUGADOR) (id ?idJug1) (francos ?francos1) (riqueza_total ?riqueza1) (ha_pagado_comida ?pagado1))
?jugador2 <- (object (is-a JUGADOR) (id ?idJug2) (francos ?francos2) (riqueza_total ?riqueza2) (ha_pagado_comida ?pagado2))
?ronda1 <- (object (is-a RONDA) (id ?idRonda1) (id_jugador_turno ?idJugT) (casilla ?casilla) (comida_a_pagar ?comidaP) (jugando_ronda ?jugando_ronda))
?ronda2 <- (object (is-a RONDA) (id ?idRonda2))
?bien1 <- (object (is-a BIENES) (id ?idBien1) (unidades ?ud1) (tipo ?tBien1))
?bien2 <- (object (is-a BIENES) (id ?idBien2) (unidades ?ud2) (tipo ?tBien2))
?fase1 <- (fase1_completada ?completada1)
?fase2 <- (fase2_completada ?completada2)
(test (eq ?casilla 7))
(test (eq ?idJug1 ?idJugT))
(test (eq ?jugando_ronda true))
(test (eq ?idJug1 ?idBien1))
(test (eq ?idJug2 ?idBien2))
(test (neq ?idJug1 ?idJug2))
(test (neq ?idBien1 ?idBien2))
(test (neq ?idRonda1 ?idRonda2))
(test (eq ?tBien1 Vaca))
(test (eq ?tBien2 Vaca))
(test (eq ?idRonda2 (+ ?idRonda1 1)))
(test (eq ?completada1 true))
(test (eq ?completada2 true))
(test (eq ?pagado1 true))
(test (eq ?pagado2 true))
=>
(modify-instance ?jugador1 (casilla_ficha_barco 2) (ha_cosechado false) (ha_pagado_comida false))
(modify-instance ?jugador2 (casilla_ficha_barco 1) (ha_cosechado false) (ha_pagado_comida false))
(unmake-instance ?ronda1)
(modify-instance ?ronda2 (jugando_ronda true))
(retract ?fase1)
(assert (fase1_completada false))
(retract ?fase2)
(assert (fase2_completada false))
(printout t crlf)
(printout t "La ronda " ?idRonda1 " ha finalizado" crlf)
(printout t "El jugador " ?idJug1 " tiene " ?francos1 " francos, " ?ud1 " unidades de comida y " ?riqueza1 " de riqueza total a falta de restar los prestamos" crlf)
(printout t "El jugador " ?idJug2 " tiene " ?francos2 " francos, " ?ud2 " unidades de comida y " ?riqueza2 " de riqueza total a falta de restar los prestamos" crlf)
)

;///////////////////////////////////////////////////   DECIDIR GANADOR   ////////////////////////////////////////////////////
(defrule AcabarGanador1
?ronda <- (object (is-a RONDA) (id ?idRonda) (casilla ?casilla) (jugando_ronda ?rondaJ))
?jugador1 <- (object (is-a JUGADOR) (id ?idJug1) (riqueza_total ?riqueza1) (prestamos ?prestamo1))
?jugador2 <- (object (is-a JUGADOR) (id ?idJug2) (riqueza_total ?riqueza2) (prestamos ?prestamo2))
?fase1 <- (fase1_completada ?completada1)
?fase2 <- (fase2_completada ?completada2)
(test (eq ?casilla 7))
(test (eq ?rondaJ true))
(test (eq ?idRonda 14))
(test (neq ?idJug1 ?idJug2))
(test (eq ?idJug1 1))
(test (> (- ?riqueza1(* ?prestamo1 7))(- ?riqueza2(* ?prestamo2 7))))
(test (eq ?completada1 true))
(test (eq ?completada2 true))
=>
(modify-instance ?jugador1 (riqueza_total (- ?riqueza1(* ?prestamo1 7))))
(modify-instance ?jugador2 (riqueza_total (- ?riqueza2(* ?prestamo2 7))))
(printout t crlf)
(printout t "Fin del juego. El ganador es el jugador 1 con una riqueza de: " (- ?riqueza1(* ?prestamo1 7)) ", frente a una riqueza del jugador 2 de: " (- ?riqueza2(* ?prestamo2 7)) crlf)
(dribble-off)
(halt)
)

(defrule AcabarGanador2
?ronda <- (object (is-a RONDA) (id ?idRonda) (casilla ?casilla) (jugando_ronda ?rondaJ))
?jugador1 <- (object (is-a JUGADOR) (id ?idJug1) (riqueza_total ?riqueza1) (prestamos ?prestamo1))
?jugador2 <- (object (is-a JUGADOR) (id ?idJug2) (riqueza_total ?riqueza2) (prestamos ?prestamo2))
?fase1 <- (fase1_completada ?completada1)
?fase2 <- (fase2_completada ?completada2)
(test (eq ?casilla 7))
(test (eq ?rondaJ true))
(test (eq ?idRonda 14))
(test (neq ?idJug1 ?idJug2))
(test (eq ?idJug2 2))
(test (< (- ?riqueza1(* ?prestamo1 7))(- ?riqueza2(* ?prestamo2 7))))
(test (eq ?completada1 true))
(test (eq ?completada2 true))
=>
(modify-instance ?jugador1 (riqueza_total (- ?riqueza1(* ?prestamo1 7))))
(modify-instance ?jugador2 (riqueza_total (- ?riqueza2(* ?prestamo2 7))))
(printout t crlf)
(printout t "Fin del juego. El ganador es el jugador 2 con una riqueza de: " (- ?riqueza2(* ?prestamo2 7))  ", frente a una riqueza del jugador 1 de: " (- ?riqueza1(* ?prestamo1 7)) crlf)
(dribble-off)
(halt)
)

(defrule AcabarEmpate
?ronda <- (object (is-a RONDA) (id ?idRonda) (casilla ?casilla) (jugando_ronda ?rondaJ))
?jugador1 <- (object (is-a JUGADOR) (id ?idJug1) (riqueza_total ?riqueza1) (prestamos ?prestamo1))
?jugador2 <- (object (is-a JUGADOR) (id ?idJug2) (riqueza_total ?riqueza2) (prestamos ?prestamo2))
?fase1 <- (fase1_completada ?completada1)
?fase2 <- (fase2_completada ?completada2)
(test (eq ?casilla 7))
(test (eq ?rondaJ true))
(test (eq ?idRonda 14))
(test (neq ?idJug1 ?idJug2))
(test (eq (- ?riqueza1(* ?prestamo1 7))(- ?riqueza2(* ?prestamo2 7))))
(test (eq ?completada1 true))
(test (eq ?completada2 true))
=>
(modify-instance ?jugador1 (riqueza_total (- ?riqueza1(* ?prestamo1 7))))
(modify-instance ?jugador2 (riqueza_total (- ?riqueza2(* ?prestamo2 7))))
(printout t crlf)
(printout t "Fin del juego. La partida ha acabado en empate, ambos jugadores con una riqueza de: " (- ?riqueza1(* ?prestamo1 7)) crlf)
(dribble-off)
(halt)
)